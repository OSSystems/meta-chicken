#!/bin/sh
#| -*- scheme -*-
exec csi -s $0 "$@"
|#

;; This script requires the following external tools:
;; - wget
;; - md5
;; - sha256sum

(module gen-egg-recipes ()

(import chicken scheme)
(use posix setup-download setup-api srfi-1 srfi-13
     files extras data-structures utils ports)

(define chicken-major-version 4)

(define egg-tarballs-uri
  (sprintf "http://code.call-cc.org/egg-tarballs/~a" chicken-major-version))

(define egg-tarballs-dir
  (normalize-pathname
   (make-pathname (current-directory) "egg-tarballs")))

(define force? (make-parameter #f))

(define (die fmt . args)
  (with-output-to-port (current-error-port)
    (lambda ()
      (apply printf (cons fmt args))
      (newline)))
  (exit 1))

(define *egg-recipes-dir* #f)

(define *eggs-dir* #f)

(define *verbose?* #f)

(define skip-eggs/reasons
  ;; List of (<egg [symbol]> <reason [string]>)
  '((2d-primitives "error")
    (3viewer "error")
    (9ML-toolkit "error")
    (aima "error")
    (allegro "error")
    (alut "error")
    (amazon-s3 "error")
    (atlas-lapack "error")
    (augeas "error")
    (autoform-postgresql "error")
    (awful-postgresql "error")
    (awful-sqlite3 "error")
    (bb "error")
    (bitcoin "error")
    (blas "error")
    (blob-utils "error")
    (bloom-filter "error")
    (bvsp-spline "error")
    (byte-blob-stream "error")
    (call-with-query "error")
    (call-with-sqlite3-connection "error")
    (canvas-draw "error")
    (cmark "error")
    (cock  "obsolete")
    (cock-utils "obsolete")
    (coerce "error")
    (contracts "obsolete")
    (coq-au-vin "error")
    (couchdb-view-server "obsolete")
    (cryptlib "error")
    (date-literals "error")
    (dict "error")
    (directory-utils "error")
    (discount "error")
    (disjoint-set "obsolete")
    (doodle "error")
    (dropbox "error")
    (easyffi "obsolete")
    (epeg "error")
    (eping "error")
    (er-macros "obsolete")
    (error-utils "error")
    (exif "error")
    (ezxdisp "error")
    (fann "error")
    (ffmpeg-video "error")
    (formular "error")
    (fpio "error")
    (freetds "error")
    (freetype "error")
    (fuse "error")
    (g2 "error")
    (genturfahi "error")
    (git "error")
    (gl-type "error")
    (gl-utils "error")
    (glfw "error")
    (glfw3 "error")
    (glls "error")
    (glm "error")
    (glpk "error")
    (glut "error")
    (gts "error")
    (hahn-utils "error")
    (hashes "error")
    (hen "error")
    (hfs+ "OSX only")
    (http-client "error")
    (hypergiant "error")
    (i3 "error")
    (image-processing "error")
    (ir-macros "obsolete")
    (iup "error")
    (jni "error")
    (json-rpc "error")
    (kalaha "error")
    (lazy-ffi "error")
    (leptonica "obsolete")
    (leveldb "error")
    (levenshtein "error")
    (libsvm "obsolete")
    (list-bindings "obsolete")
    (locale "error")
    (lzma "error")
    (macosx "OSX only")
    (magic "error")
    (mailbox "error")
    (mailbox-threads "error")
    (matlab "error")
    (matrix-utils "error")
    (md5 "error")
    (message-digest "error")
    (mistie "error")
    (mojo "error")
    (mowedline "error")
    (mpfi "error")
    (mpi "error")
    (multidoc "obsolete")
    (nanomsg "error")
    (nemo "error")
    (noise "error")
    (nomads "error")
    (objc "error")
    (opengl "error")
    (osxattr "OSX only")
    (parametric-curve "error")
    (peep "obsolete")
    (phoghorn "error")
    (phricken "error")
    (physfs "error")
    (picnic "error")
    (plot "error")
    (ploticus "error")
    (posix-shm "error")
    (postgresql "error")
    (prcc "error")
    (probdist "error")
    (proccpuinfo "error")
    (prometheus "error")
    (pseudo-meta-egg-info "error")
    (pstk "obsolete")
    (pyffi "error")
    (qobischeme-ui "error")
    (qt "obsolete")
    (qt-light "error")
    (quaternions "obsolete")
    (qwiki "error")
    (R "error")
    (random-access-lists "error")
    (raspberry-pi-gpio "error")
    (redis "error")
    (redis-client "error")
    (remote-mailbox "error")
    (remote-mailbox-threads "error")
    (salt "error")
    (sass "error")
    (schematic "error")
    (sdl "error")
    (sdl-base "error")
    (sdl-gfx "error")
    (sdl-img "error")
    (sdl-mixer "error")
    (sdl-ttf "error")
    (setup-helper-cock "obsolete")
    (seulex "error")
    (simple-graphics "error")
    (simple-logging "obsolete")
    (simple-units "error")
    (sixtyfive-oh-two "error")
    (skiplists "error")
    (socket "error")
    (spiffy-cgi-handlers "error")
    (spiffy-dynamic-handlers "obsolete")
    (spock "error")
    (srfi-19 "error")
    (srfi-29 "error")
    (srfi-78 "obsolete")
    (ssql-postgresql "error")
    (statistics "obsolete")
    (stemmer "error")
    (string-utils "error")
    (sundials "error")
    (svn-client "error")
    (sxml-templates "error")
    (tcp6 "error")
    (tokyocabinet "error")
    (tuples "error")
    (tweetnacl "error")
    (udp6 "error")
    (uuid-lib "error")
    (webgate "error")
    (webkit "error")
    (websockets "error")
    (win32-msgbox "Windows only")
    (xft "error")
    (xosd "error")
    (xtypes "error")
    (zmq "error")
    ))

(define skip-eggs (map car skip-eggs/reasons))

(define (all-eggs)
  (lset-difference
   equal?
   (remove string-null?
           (with-input-from-pipe "chicken-install -list | sort"
             read-lines))
   (map symbol->string skip-eggs)))

(define self-dependent-eggs
  ;; Eggs that generate multiple modules that have interdependencies.
  ;; This script generates a -cross dependency for eggs that use
  ;; modules generated by themselves.
  '(9p
    abnf
    accents-substitute
    amb
    awful
    awful-static-pages
    bind
    bindings
    callable-data-structures
    cgi
    check-errors
    chickadee
    chicken-doc-admin
    chickumber
    combinators
    condition-utils
    concurrent-native-callbacks
    coops
    coops-utils
    crunch
    csv
    data-generators
    easyffi
    elliptic-curves
    F-operator
    fast-generic
    fmt
    graphs
    hyde
    inline
    locale
    log5scm
    lookup-table
    loop
    low-level-macros
    lowdown
    manual-labor
    markdown-svnwiki
    mbox
    message-digest
    miniML
    missbehave
    mw
    mw-core
    monad
    moremacros
    parley
    protobuf
    protolk
    r7rs
    refbd
    salmonella
    scbib
    scss
    sequences
    sicp
    signal-diagram
    slatex
    streams-primitive
    sp
    spiffy
    srfi-27
    srfi-41
    srfi-101
    srfi-102
    ssql
    sxml-fu
    sxpath
    thread-utils
    tinyclos
    ugarit
    unitconv
    utf8
    vandusen
    xml-rpc
    ))

(define (self-dependent-egg? egg)
  (and (memq egg self-dependent-eggs) #t))

(define external-dependencies
  '((berkeley-db db)
    (cairo   cairo)
    (dbus    dbus)
    (expat  expat)
    (fastcgi  fcgi)
    (gdbm  gdbm)
    (imlib2  imlib2)
    (ldap-bind openldap)
    (lzma    xz)
    (mysql-client  mariadb)
    (openal  openal-soft)
    (opengl-glew  glew)
    (openssl openssl)
    (ncurses ncurses)
    (readline readline)
    (soil  mesa)
    (sql-de-lite sqlite3)
    (sqlite3  sqlite3)
    (udev  udev)
    (usb  libusb)
    (uuid-ossp  ossp-uuid)
    (yaml  libyaml)
    (xlib    libx11)
    (zlib  zlib)
    ))

(define extra-chicken-install-options
  '((sql-de-lite  "-D sql-de-lite-external-lib")))

(define (egg-extra-chicken-install-options egg)
  (let ((egg (if (string? egg)
                 (string->symbol egg)
                 egg)))
    (and-let* ((opts (alist-ref egg extra-chicken-install-options)))
      (car opts))))

(define (fix-license license)
  (if (and license (string? license)) ;; we can expect any data type
                                      ;; in the .meta file
      (cond ((string-ci=? license "public domain")
             "PD")
            ((or (string-ci=? license "LGPL 3")
                 (string-ci=? license "LGPL-3"))
             "LGPL-3.0")
            ((equal? license "bsd")
             "BSD")
            ((equal? license "EPL")
             "EPL-1.0")
            ((equal? license "GPL-2 or later")
             "GPLv2+")
            ((equal? license "Free Use")
             "PD")
            ((equal? license "Bremer License")
             "Bremer")
            (else license))
      license))

(define (egg-external-dependencies egg)
  (let ((egg (if (string? egg)
                 (string->symbol egg)
                 egg)))
    (or (alist-ref egg external-dependencies) '())))

(define (list-extension-versions name dir)
  (let ((eggdir (make-pathname dir name)))
    (cond ((directory-exists? eggdir)
           (string-concatenate
            (map (cut string-append <> "\n") (directory eggdir))))
          (else "unknown\n"))))

(define (latest-egg-version egg)
  (let ((versions
         (sort
          (string-split
           (list-extension-versions (->string egg) *eggs-dir*)
           "\n")
          version>=?)))
    (if (null? versions)
        (error 'latest-egg-version
               (sprintf "Could not determine version for ~a" egg))
        (car versions))))

(define (meta-file-pathname egg version)
  (make-pathname (list *eggs-dir* egg version)
                 egg
                 "meta"))

(define (read-meta-file egg version)
  (with-input-from-file (meta-file-pathname egg version) read))

(define (meta-field key meta #!optional default)
  (or (and-let* ((d (assq key meta)))
                (cdr d))
      default))

(define (chicken-unit? lib)
  (and (member lib '("library" "eval" "expand" "data-structures" "ports"
                     "files" "extras" "irregex" "srfi-1" "srfi-4" "srfi-13"
                     "srfi-14" "srfi-18" "srfi-69" "posix" "utils" "tcp"
                     "lolevel" "foreign"))
       #t))

(define (egg-dependencies meta-data)
  (let* ((raw-deps (append
                    (meta-field 'depends meta-data '())
                    (meta-field 'needs meta-data '())))
         (deps (map (lambda (dep)
                      (->string (if (pair? dep)
                                    (car dep)
                                    dep)))
                    raw-deps)))
    ;; remove chicken and core units that some eggs [wrongly]
    ;; add to their dependencies
    (remove (lambda (egg)
              (or (equal? egg "chicken")
                  (chicken-unit? egg)))
            deps)))

(define (recipe-pathname egg version)
  (make-pathname *egg-recipes-dir*
                 (sprintf "chicken-egg-~a_~a.bb"
                          (string-downcase egg)
                          version)))

(define (hash-sum hash file)
  (car (string-split
        (call-with-input-pipe
         (sprintf "~asum ~a" hash file)
         read-all))))

(define (download-egg-tarball egg version)
  ;; Download tarball for egg/version.  Return a pair
  ;; (<md5sum> . <sha256sum>) for the downloaded tarball
  (create-directory egg-tarballs-dir 'with-parents)
  (let* ((tarball (sprintf "~a-~a.tar.gz" egg version))
         (tarball-uri (sprintf "~a/~a/~a" egg-tarballs-uri egg tarball))
         (downloaded-tarball
          (make-pathname egg-tarballs-dir tarball))
         (md5sum-file (string-append downloaded-tarball ".md5"))
         (sha256sum-file (string-append downloaded-tarball ".sha256")))
    (if (and (file-exists? downloaded-tarball)
             (file-exists? md5sum-file)
             (file-exists? sha256sum-file))
        (cons (read-all md5sum-file)
              (read-all sha256sum-file))
        (begin
          (printf "Downloading ~a ...\n" tarball-uri)
          (system* (sprintf "wget -q ~a -O ~a"
                            tarball-uri
                            downloaded-tarball))
          (let ((md5sum (hash-sum 'md5 downloaded-tarball))
                (sha256sum (hash-sum 'sha256 downloaded-tarball)))
            (with-output-to-file md5sum-file (cut display md5sum))
            (with-output-to-file sha256sum-file (cut display sha256sum))
            (cons md5sum sha256sum))))))

;;;
;;; Recipe generation
;;;
(define (format-description meta-data)
  (let ((description (meta-field 'synopsis meta-data)))
    (and description
         (sprintf "DESCRIPTION = \"~a\""
                  (string-translate* (car description) `(("`" . "")
                                                         ("\n" . "\\n\\\n")))))))

(define (format-license meta-data)
  (let ((license (meta-field 'license meta-data)))
    (sprintf "LICENSE = \"~a\""
             (if license
                 (fix-license (car license))
                 "Unknown"))))

(define (format-license-checksum egg version)
  (let ((meta-file (meta-file-pathname egg version)))
    (sprintf "LIC_FILES_CHKSUM = \"file://~a;md5=~a\""
             (pathname-strip-directory meta-file)
             (hash-sum 'md5 meta-file))))

(define (format-deps var deps)
  (if (null? deps)
      '()
      (list (sprintf "~a = \" ~a\""
                     var
                     (string-intersperse deps)))))

(define (format-all-deps egg deps ext-deps)
  (let* ((deps-eggs (map egg->recipe deps))
         (deps-self-egg
          (if (self-dependent-egg? (string->symbol egg))
              (list (egg->recipe/cross egg))
              '()))
         (deps-pkg (map symbol->string ext-deps))
         (deps-pkg-cross (map egg->recipe/cross deps))
         (deps-pkg-crosssdk (map egg->recipe/crosssdk deps))
         (deps-pkg-nativesdk (map egg->recipe/nativesdk deps))
         (deps-pkg-native (map recipe->native ext-deps))
         (cross-deps (append deps-pkg-cross deps-pkg-native))
         (crosssdk-deps (append deps-pkg-crosssdk deps-pkg-native))
         (nativesdk-deps (append deps-pkg-nativesdk deps-pkg-crosssdk))
         (target-deps (append deps-eggs deps-pkg deps-pkg-cross deps-self-egg))
         (output
          (append
           (format-deps "DEPENDS_append_class-cross" cross-deps)
           (format-deps "DEPENDS_append_class-crosssdk" crosssdk-deps)
           (format-deps "DEPENDS_append_class-nativesdk" nativesdk-deps)
           (format-deps "DEPENDS" target-deps)
           (format-deps "RDEPENDS_${PN}" deps-eggs))))
    (if (null? output)
        ""
        (string-append (string-intersperse output "\n") "\n"))))

(define (format-hash-sums egg version)
  (let ((hashes (download-egg-tarball egg version)))
    (sprintf "SRC_URI[md5sum] = \"~a\"\nSRC_URI[sha256sum] = \"~a\"\n"
             (car hashes)
             (cdr hashes))))

(define (format-src-uri egg version)
  (sprintf "SRC_URI = \"~a/~a/~a-${PV}.tar.gz\"\n"
             egg-tarballs-uri
             egg
             egg))

(define (maybe-require-inc egg version)
  (let* ((inc-filename (sprintf "chicken-egg-~a.inc" (string-downcase egg)))
         (inc-path (make-pathname *egg-recipes-dir* inc-filename)))
    (if (file-exists? inc-path)
        (sprintf "\nrequire ~a\n" inc-filename)
        "")))

(define (format-extra-chicken-install-options csc-options)
  (sprintf "EXTRA_CHICKEN_INSTALL_OPTIONS += \" ~a \"\n"
           csc-options))

(define (egg->recipe egg)
  (conc "chicken-egg-" (string-downcase egg)))

(define (egg->recipe/cross egg)
  (conc "chicken-egg-" (string-downcase egg) "-cross"))

(define (egg->recipe/crosssdk egg)
  (conc "chicken-egg-" (string-downcase egg) "-crosssdk"))

(define (recipe->native recipe)
  (conc recipe "-native"))

(define (egg->recipe/nativesdk egg)
  (conc "nativesdk-chicken-egg-" (string-downcase egg)))

(define (gen-recipe egg)
  (let* ((version (latest-egg-version egg))
         (recipe-file (recipe-pathname egg version)))
    (when (or (force?) (not (file-exists? recipe-file)))
      (let* ((meta-data (read-meta-file egg version))
             (deps (egg-dependencies meta-data))
             (ext-deps (egg-external-dependencies egg))
             (has-deps? (or (not (null? ext-deps)) (not (null? deps)))))
        (if (any (cut memq <> skip-eggs) deps)
            (fprintf (current-error-port)
                     "Skipping ~a because it contains skipped dependencies ~S\n"
                     egg (filter (cut memq <> skip-eggs) deps))
            (let* ((csc-options (egg-extra-chicken-install-options egg))
                   (content
                    (list
                     "SECTION = \"devel/chicken\""
                     (format-description meta-data)
                     (format-license meta-data)
                     (format-license-checksum egg version)
                     (format-all-deps egg deps ext-deps)
                     (and csc-options
                          (format-extra-chicken-install-options csc-options))
                     (format-src-uri egg version)
                     (format-hash-sums egg version)
                     (sprintf "S = \"${WORKDIR}/~a-${PV}\"" egg)
                     (maybe-require-inc egg version)
                     (string-append "inherit chicken_install\n")
                     (string-append "BBCLASSEXTEND = \"cross crosssdk nativesdk\""))))
              (when *verbose?*
                (print (string-intersperse (list egg version (->string deps)) "\t")))
              (with-output-to-file recipe-file
                (lambda ()
                  (print (string-intersperse (filter identity content) "\n"))))
              (when has-deps?
                (for-each gen-recipe deps))))))))

(define (command-line-argument option args)
  ;; Returns the argument associated to the command line option OPTION
  ;; in ARGS or #f if OPTION is not found in ARGS or doesn't have any
  ;; argument.
  (let ((param/val (filter (lambda (opt)
                             (string-prefix? (conc option "=") opt))
                           args)))
    (and (not (null? param/val))
         (let ((tokens (string-split (last param/val) "=")))
           (string-intersperse (cdr tokens) "")))))

(define (usage #!optional exit-code)
  (let ((port (if (and exit-code (not (zero? exit-code)))
                  (current-error-port)
                  (current-output-port))))
    (fprintf port
             "~a --eggs-dir=<eggs-dir> --dest-dir=<dest dir> [--force] [--verbose]\n"
             (pathname-strip-directory (program-name))))
  (when exit-code (exit exit-code)))


(let ((args (command-line-arguments)))
  (when (null? args)
    (usage 1))

  (when (or (member "-h" args)
            (member "-help" args)
            (member "--help" args))
    (usage 0))

  (when (member "--verbose" args)
    (set! *verbose?* #t))

  (set! *eggs-dir* (command-line-argument '--eggs-dir args))
  (unless *eggs-dir* (die "Missing --eggs-dir=<eggs dir>"))

  (set! *egg-recipes-dir* (command-line-argument '--dest-dir args))
  (unless *egg-recipes-dir* (die "Missing --dest-dir=<dest-dir>"))

  (when (and (file-exists? *egg-recipes-dir*)
             (not (directory? *egg-recipes-dir*)))
    (die "~a exists but is not a directory." *egg-recipes-dir* ))

  (unless (file-exists? *egg-recipes-dir*)
    (create-directory *egg-recipes-dir*))

  (when (member "--force" args)
    (force? #t))

  (unless (directory? *eggs-dir*)
    (die "'~a' doesn't exist or is not a directory." *eggs-dir*))

  (for-each gen-recipe (all-eggs)))

) ;; end module
