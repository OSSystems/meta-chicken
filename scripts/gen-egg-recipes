#!/bin/sh
#| -*- scheme -*-
exec csi -s $0 "$@"
|#

(use posix setup-download setup-api srfi-1)

(define force? (make-parameter #f))

(define (die fmt . args)
  (with-output-to-port (current-error-port)
    (lambda ()
      (apply printf (cons fmt args))
      (newline)))
  (exit 1))

(define *egg-recipes-dir* #f)

(define *eggs-dir* #f)

(define all-eggs
  (map symbol->string
       '(awful-ssl
         channel
         connman
         crypt
         dbus
         expand-full
         foreigners
         free-gettext
         ini-file
         json
         make
         scron
         )))

(define (self-dependent-egg egg)
  (memq egg '(awful spiffy)))

(define external-dependencies
  '((openssl openssl)
    (lzma    lzma)
    (ncurses ncurses)
    (readline readline)
    (xlib    libx11)
    (dbus    dbus)
    ))

(define (fix-license license)
  (if (and license (string? license)) ;; we can expect any data type
                                      ;; in the .meta file
      (cond ((string-ci=? license "public domain")
             "PD")
            ((string-ci=? license "LGPL-1")
             "LGPL")
            (else license))
      license))

(define (egg-external-dependencies egg)
  (let ((egg (if (string? egg)
                 (string->symbol egg)
                 egg)))
    (or (alist-ref egg external-dependencies) '())))

(define (latest-egg-version egg)
  (let ((versions
         (sort
          (string-split
           (list-extension-versions (->string egg) 'local *eggs-dir*)
           "\n")
          version>=?)))
    (if (or (null? versions) (equal? (car versions) "unknown"))
        "trunk"
        (car versions))))

(define (meta-file-pathname egg version)
  (make-pathname (if (equal? version "trunk")
                     (list *eggs-dir* egg version)
                     (list *eggs-dir* egg "tags" version))
                 egg "meta"))

(define (read-meta-file egg version)
  (let ((meta-file (meta-file-pathname egg version)))
    (unless (file-exists? meta-file) ;; maybe the egg dir has no tags/trunk dirs
      (let ((unversioned-meta (make-pathname (list *eggs-dir* egg) egg "meta")))
        (if (file-exists? unversioned-meta)
            (set! meta-file unversioned-meta)
            (error 'read-meta-file "Could not find meta file for" egg))))
    (with-input-from-file meta-file read)))

(define (meta-field key meta #!optional default)
  (or (and-let* ((d (assq key meta)))
                (cdr d))
      default))

(define (egg-dependencies meta-data)
  (let ((deps
         (append
          (meta-field 'depends meta-data '())
          (meta-field 'needs meta-data '()))))
    (remove (lambda (egg)
              (member egg '("chicken" "extras" "utils" "srfi-69" "srfi-1" "srfi-13" "foreign" "data-structures" "ports")))
            (map (lambda (dep)
                   (->string (if (pair? dep)
                                 (car dep)
                                 dep)))
                 deps))))

(define (gen-recipe egg)
  (let* ((version (latest-egg-version egg))
         (recipe-file (make-pathname *egg-recipes-dir*
                                     (conc "chicken-egg-" (string-downcase egg) "_" version ".bb"))))
    (when (or (force?) (not (file-exists? recipe-file)))
      (let* ((meta-data (read-meta-file egg version))
             (deps (egg-dependencies meta-data))
             (ext-deps (egg-external-dependencies egg))
             (has-deps? (or (not (null? ext-deps)) (not (null? deps))))
             (license (meta-field 'license meta-data))
             (description (meta-field 'synopsis meta-data))
             (content
              (list
               "SECTION = \"devel/chicken\""
               (and description
                    (string-append "DESCRIPTION = \"" (string-translate* (car description) `(("`" . ""))) "\""))
               (string-append "LICENSE = \"" (if license
                                                 (fix-license (car license))
                                                 "Unknown") "\"")
               (string-append "LIC_FILES_CHKSUM = \"file://" (pathname-strip-directory (meta-file-pathname egg version))
                              ";md5=" (car (string-split (call-with-input-pipe
                                                          (string-append "md5sum " (meta-file-pathname egg version))
                                                          read-all)))
                              "\"")
               (let* ((deps-list-eggs (map (lambda (dep)
                                             (conc "chicken-egg-" dep))
                                           deps))
                      (deps-list-self-egg (if (self-dependent-egg (string->symbol egg))
                                              (list (conc "chicken-egg-" egg "-cross"))
                                              '()))
                      (deps-list-pkgs (map symbol->string ext-deps))
                      (deps-list-eggs-cross (map (lambda (dep)
                                                   (conc "chicken-egg-" dep "-cross"))
                                                 deps))
                      (deps-list-pkgs-native (map (lambda (dep)
                                                    (conc dep "-native"))
                                                  ext-deps))

                      (cross-deps (append deps-list-eggs-cross deps-list-pkgs-native))
                      (target-deps (append deps-list-eggs deps-list-pkgs deps-list-eggs-cross deps-list-self-egg))

                      (output
                       (append
                        (if (not (null? cross-deps))
                            (list (string-append "DEPENDS_virtclass-cross += \"" (string-intersperse cross-deps) "\""))
                            '())
                        (if (not (null? target-deps))
                            (list (string-append "DEPENDS += \"" (string-intersperse target-deps) "\""))
                            '())
                        (if (not (null? deps-list-eggs))
                            (list (string-append "RDEPENDS_${PN} += \"" (string-intersperse deps-list-eggs) "\""))
                            '()))))

                 (if (null? output)
                     ""
                     (string-append (string-intersperse output "\n") "\n")))

               (string-append "inherit chicken_install\n")
               (string-append "BBCLASSEXTEND = \"cross\""))))
        (print (string-intersperse (list egg version (->string deps)) "\t"))
        (with-output-to-file recipe-file
          (lambda ()
            (print (string-intersperse (filter identity content) "\n"))))

        (when has-deps? (for-each gen-recipe deps))))))

(define (command-line-argument option args)
  ;; Returns the argument associated to the command line option OPTION
  ;; in ARGS or #f if OPTION is not found in ARGS or doesn't have any
  ;; argument.
  (let ((param/val (filter (lambda (opt)
                             (string-prefix? (conc option "=") opt))
                           args)))
    (and (not (null? param/val))
         (let ((tokens (string-split (last param/val) "=")))
           (string-intersperse (cdr tokens) "")))))

(define (usage #!optional exit-code)
  (print (pathname-strip-directory (program-name)) " --eggs-dir=<eggs-dir> --dest-dir=<dest dir> [ --force ]")
  (when exit-code (exit exit-code)))


(let ((args (command-line-arguments)))
  (when (null? args)
    (usage 1))

  (when (or (member "-h" args)
            (member "-help" args)
            (member "--help" args))
    (usage 0))

  (set! *eggs-dir* (command-line-argument '--eggs-dir args))
  (unless *eggs-dir* (die "Missing --eggs-dir=<eggs dir>"))

  (set! *egg-recipes-dir* (command-line-argument '--dest-dir args))
  (unless *egg-recipes-dir* (die "Missing --dest-dir=<dest-dir>"))

  (when (and (file-exists? *egg-recipes-dir*)
             (not (directory? *egg-recipes-dir*)))
    (die "~a exists but is not a directory." *egg-recipes-dir* ))

  (unless (file-exists? *egg-recipes-dir*)
    (create-directory *egg-recipes-dir*))

  (when (member "--force" args)
    (force? #t))

  (unless (directory? *eggs-dir*)
    (die "'~a' doesn't exist or is not a directory." *eggs-dir*))

  (for-each gen-recipe all-eggs))
